"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Signal: () => import_signals_core4.Signal,
  batch: () => import_signals_core4.batch,
  computed: () => computed,
  deepEqual: () => deepEqual,
  derived: () => derived,
  effect: () => import_signals_core4.effect,
  effects: () => effects,
  reactive: () => reactive,
  signal: () => import_signals_core4.signal,
  untracked: () => import_signals_core4.untracked
});
module.exports = __toCommonJS(src_exports);
var import_signals_core4 = require("@preact/signals-core");

// src/computed.ts
var import_signals_core = require("@preact/signals-core");
function computed(compute, comparator) {
  if (comparator) {
    let previousValue;
    return (0, import_signals_core.computed)(() => {
      const value = compute();
      if (value && previousValue && comparator(previousValue, value)) {
        return previousValue;
      }
      previousValue = value;
      return value;
    });
  }
  return (0, import_signals_core.computed)(compute);
}

// src/comparators.ts
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a instanceof Set && b instanceof Set) {
    if (a.size !== b.size) {
      return false;
    }
    for (const value of a) {
      if (!b.has(value)) {
        return false;
      }
    }
    return true;
  }
  if (Array.isArray(a)) {
    if (!Array.isArray(b) || a.length !== b.length) {
      return false;
    }
    const hasDifferentValues = a.some(
      (value, index) => !deepEqual(value, b[index])
    );
    return !hasDifferentValues;
  }
  try {
    return JSON.stringify(a) === JSON.stringify(b);
  } catch (e) {
    return false;
  }
}

// src/decorators.ts
var import_signals_core2 = require("@preact/signals-core");
function reactive(target, propertyKey) {
  const store = /* @__PURE__ */ new WeakMap();
  Object.defineProperty(target, propertyKey, {
    get() {
      if (!store.get(this)) {
        store.set(this, (0, import_signals_core2.signal)(void 0));
      }
      const stored = store.get(this);
      const value = stored == null ? void 0 : stored.value;
      return value;
    },
    set(value) {
      const stored = store.get(this);
      if (stored) {
        if (stored.peek() !== value) {
          stored.value = value;
        }
        return;
      }
      store.set(this, (0, import_signals_core2.signal)(value));
    }
  });
}
function derived(target, propertyKey, descriptor) {
  const store = /* @__PURE__ */ new WeakMap();
  const compute = descriptor.get;
  Object.defineProperty(target, propertyKey, {
    get() {
      if (!compute) {
        return void 0;
      }
      if (!store.get(this)) {
        store.set(this, computed(compute.bind(this)));
      }
      const stored = store.get(this);
      const value = stored == null ? void 0 : stored.value;
      return value;
    }
  });
}

// src/effects.ts
var import_signals_core3 = require("@preact/signals-core");
function effects(...entries) {
  const effects2 = entries.map(import_signals_core3.effect);
  return () => effects2.forEach((cleanup) => cleanup());
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Signal,
  batch,
  computed,
  deepEqual,
  derived,
  effect,
  effects,
  reactive,
  signal,
  untracked
});
