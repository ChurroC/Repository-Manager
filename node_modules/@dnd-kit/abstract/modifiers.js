import { configurator, Modifier } from '@dnd-kit/abstract';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _AxisModifier = class extends Modifier {
  apply({ transform }) {
    if (!this.options) {
      return transform;
    }
    const { axis, value } = this.options;
    return {
      ...transform,
      [axis]: value
    };
  }
};
var AxisModifier = _AxisModifier;
__publicField(AxisModifier, "configure", configurator(_AxisModifier));
var RestrictToVerticalAxis = AxisModifier.configure({
  axis: "x",
  value: 0
});
var RestrictToHorizontalAxis = AxisModifier.configure({
  axis: "y",
  value: 0
});

// src/modifiers/boundingRectangle.ts
function restrictShapeToBoundingRectangle(shape, transform, boundingRect) {
  const value = {
    ...transform
  };
  if (shape.boundingRectangle.top + transform.y <= boundingRect.top) {
    value.y = boundingRect.top - shape.boundingRectangle.top;
  } else if (shape.boundingRectangle.bottom + transform.y >= boundingRect.top + boundingRect.height) {
    value.y = boundingRect.top + boundingRect.height - shape.boundingRectangle.bottom;
  }
  if (shape.boundingRectangle.left + transform.x <= boundingRect.left) {
    value.x = boundingRect.left - shape.boundingRectangle.left;
  } else if (shape.boundingRectangle.right + transform.x >= boundingRect.left + boundingRect.width) {
    value.x = boundingRect.left + boundingRect.width - shape.boundingRectangle.right;
  }
  return value;
}

export { AxisModifier, RestrictToHorizontalAxis, RestrictToVerticalAxis, restrictShapeToBoundingRectangle };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=modifiers.js.map